// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  permissinIDs String[]     @db.ObjectId
  permissions  Permission[] @relation(fields: [permissinIDs], references: [id])
  userIDs      String[]     @db.ObjectId
  users        User[]       @relation(fields: [userIDs], references: [id])
  createdAt    DateTime     @default(now()) @db.Timestamp
  updatedAt    DateTime     @updatedAt @db.Timestamp
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  roleIDs   String[] @db.ObjectId
  roles     Role[]   @relation(fields: [roleIDs], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
}

enum Gender {
  Male
  Female
  Other
}

model Cinema {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  halls       Hall[]
  showTime    ShowTime[]
  address     String
  city        String
  users       User[]
  phoneNumber String
  status      Boolean    @default(true)
  openingHour String?
  closingHour String?
  createdAt   DateTime   @default(now()) @db.Timestamp
  updatedAt   DateTime   @updatedAt @db.Timestamp
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  firstName       String
  lastName        String
  gender          Gender    @default(Other)
  phoneNumber     String?
  dateOfBirth     DateTime?
  password        String
  address         String?
  rememberMeToken String?
  roleIDs         String[]  @db.ObjectId
  roles           Role[]    @relation(fields: [roleIDs], references: [id])
  cinema          Cinema?   @relation(fields: [cinemaID], references: [id])
  cinemaID        String?   @db.ObjectId
  status          Boolean   @default(true)
  ownerAccess     Boolean   @default(false)
  createdAt       DateTime  @default(now()) @db.Timestamp
  updatedAt       DateTime  @updatedAt @db.Timestamp
}

model Row {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rowNumber String
  color     String
  price     Int
  hall      Hall     @relation(fields: [hallID], references: [id])
  hallID    String   @db.ObjectId
  seats     Seat[]
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
}

model Seat {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  seatNumber String
  price      String?
  color      String?
  row        Row       @relation(fields: [rowID], references: [id])
  rowID      String    @db.ObjectId
  Booking    Booking[]
  createdAt  DateTime  @default(now()) @db.Timestamp
  updatedAt  DateTime  @updatedAt @db.Timestamp
}

model Hall {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  cinema    Cinema     @relation(fields: [cinemaID], references: [id])
  cinemaID  String     @db.ObjectId
  showTime  ShowTime[]
  rows      Row[]
  createdAt DateTime   @default(now()) @db.Timestamp
  updatedAt DateTime   @updatedAt @db.Timestamp
}

model Movie {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  genre       String
  duration    String
  director    String
  cast        String?
  description String?
  releaseDate String?
  showTime    ShowTime[]
  createdAt   DateTime   @default(now()) @db.Timestamp
  updatedAt   DateTime   @updatedAt @db.Timestamp
}

model ShowTime {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cinemaID  String   @db.ObjectId
  cinema    Cinema   @relation(fields: [cinemaID], references: [id])
  hallID    String   @db.ObjectId
  hall      Hall     @relation(fields: [hallID], references: [id])
  movieID   String   @db.ObjectId
  movie     Movie    @relation(fields: [movieID], references: [id])
  Ticket    Ticket[]
  movieTime DateTime
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
}

model Ticket {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  showTimeID String    @db.ObjectId
  showTime   ShowTime  @relation(fields: [showTimeID], references: [id])
  createdAt  DateTime  @default(now()) @db.Timestamp
  updatedAt  DateTime  @updatedAt @db.Timestamp
  Booking    Booking[]
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  seatID    String   @db.ObjectId
  seat      Seat     @relation(fields: [seatID], references: [id])
  ticketID  String   @db.ObjectId
  ticket    Ticket   @relation(fields: [ticketID], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
}
